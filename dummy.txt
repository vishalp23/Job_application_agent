import os
import time
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

# Load environment variables
load_dotenv()

# LinkedIn credentials
LINKEDIN_USERNAME = os.getenv("LINKEDIN_USERNAME")
LINKEDIN_PASSWORD = os.getenv("LINKEDIN_PASSWORD")

def initialize_driver():
    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
    chrome_options.add_argument('--ignore-certificate-errors')

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

def login_to_linkedin(driver):
    driver.get("https://www.linkedin.com/login")
    
    try:
        username_field = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "username"))
        )
        username_field.send_keys(LINKEDIN_USERNAME)

        password_field = driver.find_element(By.ID, "password")
        password_field.send_keys(LINKEDIN_PASSWORD)

        login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
        login_button.click()

        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "global-nav"))
        )
        print("Logged in successfully.")
    except Exception as e:
        print(f"Login failed. Error: {e}")
        driver.save_screenshot("login_error.png")
        raise

def search_for_data_engineer_jobs(driver):
    try:
        driver.get("https://www.linkedin.com/jobs/")

        search_input = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//input[contains(@id, 'jobs-search-box-keyword-id')]"))
        )
        
        search_input.clear()
        search_input.send_keys("Data Engineer")
        search_input.send_keys(Keys.RETURN)

        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.CLASS_NAME, "jobs-search-results-list"))
        )
        print("Search completed for Data Engineer jobs.")
    except TimeoutException:
        print("Timeout waiting for job search results. The page may not have loaded completely.")
        driver.save_screenshot("search_timeout.png")
    except Exception as e:
        print(f"Error during job search: {e}")
        driver.save_screenshot("search_error.png")
        raise

def load_application_data():
    return {
        "resume": "C:/Users/vrjav/Downloads/automatic job apply/job_folderVidyaranya_R_J.pdf",
        "first_name": "Vidyaranya",
        "last_name": "Javalagi",
        "email": "vrjavalagi779@gmail.com",
        "phone": "7202310211",
        "location": "Denver, Colorado",
        "linkedin_profile": "https://www.linkedin.com/in/vidyaranya-javalagi/",
    }

def click_element(driver, element):
    try:
        driver.execute_script("arguments[0].scrollIntoView(true);", element)
        clickable = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, element.get_attribute('id'))))
        clickable.click()
    except:
        driver.execute_script("arguments[0].click();", element)

def apply_for_jobs(driver):
    application_data = load_application_data()
    try:
        job_listings = WebDriverWait(driver, 30).until(
            EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".job-card-container"))
        )
        
        for job in job_listings[:5]:
            try:
                click_element(driver, job)
                time.sleep(2)
                
                # Try to find the Easy Apply button
                try:
                    easy_apply_button = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, ".jobs-apply-button"))
                    )
                    click_element(driver, easy_apply_button)
                    handle_easy_apply(driver, application_data)
                except TimeoutException:
                    # If Easy Apply button is not found, try regular apply
                    apply_button = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, ".jobs-apply-button"))
                    )
                    click_element(driver, apply_button)
                    handle_regular_apply(driver, application_data)
                
                print("Applied to a job successfully!")
                time.sleep(2)
                
            except Exception as e:
                print(f"Error applying to job: {e}")
                continue
            
    except Exception as e:
        print(f"Error during job application process: {e}")
        driver.save_screenshot("application_error.png")

def handle_easy_apply(driver, application_data):
    try:
        while True:
            fill_application_fields(driver, application_data)
            
            next_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button[aria-label='Continue to next step']"))
            )
            click_element(driver, next_button)
            time.sleep(1)
    except TimeoutException:
        # Reached the end of the application
        submit_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[aria-label='Submit application']"))
        )
        click_element(driver, submit_button)

def handle_regular_apply(driver, application_data):
    # Implement logic for regular apply process
    # This might involve filling out external forms or redirecting to company websites
    print("Regular apply process - implementation needed")
    # You may want to add logic here to handle different types of regular apply processes

def fill_application_fields(driver, data):
    field_mappings = {
        "first_name": (By.ID, "first-name"),
        "last_name": (By.ID, "last-name"),
        "email": (By.ID, "email"),
        "phone": (By.ID, "phone-number"),
        "location": (By.ID, "location"),
    }
    
    for field, locator in field_mappings.items():
        try:
            element = WebDriverWait(driver, 5).until(EC.presence_of_element_located(locator))
            element.clear()
            element.send_keys(data[field])
        except TimeoutException:
            print(f"Field {field} not found. Skipping.")
    
    try:
        resume_upload = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='file']"))
        )
        resume_upload.send_keys(data["resume"])
    except TimeoutException:
        print("Resume upload field not found. Skipping.")

def retry_on_network_error(func, max_retries=3, delay=5):
    for attempt in range(max_retries):
        try:
            return func()
        except (TimeoutException, WebDriverException) as e:
            if attempt == max_retries - 1:
                raise
            print(f"Network error occurred. Retrying in {delay} seconds...")
            time.sleep(delay)

def main():
    driver = initialize_driver()
    try:
        login_to_linkedin(driver)
        retry_on_network_error(lambda: search_for_data_engineer_jobs(driver))
        apply_for_jobs(driver)
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        driver.quit()

if __name__ == "__main__":
    main()
